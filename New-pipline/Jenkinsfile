pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'surajv86/getting-started-app'  // Docker image name
        KUBE_CONFIG = credentials('kubeconfig-credential-id')  // Kubernetes config credentials ID
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')  // Docker Hub credentials ID
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/suraj-v86/getting-started-app.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh 'yarn install'  // Ensure Yarn is available on the agent
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerTag = "${env.BUILD_NUMBER}"  // Use build number as tag
                    sh "docker build -t ${DOCKER_IMAGE}:${dockerTag} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def dockerTag = "${env.BUILD_NUMBER}"
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    }
                    sh "docker push ${DOCKER_IMAGE}:${dockerTag}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def dockerTag = "${env.BUILD_NUMBER}"
                    withEnv(["KUBECONFIG=${KUBE_CONFIG}"]) {
                        sh 'kubectl apply -f kubernetes/namespace.yml'
                        sh 'kubectl apply -f kubernetes/deployment.yml'
                        sh 'kubectl apply -f kubernetes/service.yml'
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    def dockerTag = "${env.BUILD_NUMBER}"
                    sh "docker rmi ${DOCKER_IMAGE}:${dockerTag}"
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment were successful!'
            // Add notifications if necessary (e.g., Slack)
        }
        failure {
            echo 'Build or deployment failed!'
            // Add logs or notification for debugging
        }
    }
}
