pipeline {
    agent {
        docker {
            image 'node:16-alpine' // Use Node.js Docker image
        }
    }

    environment {
        // Set environment variables
        DOCKER_IMAGE = "surajv86/getting-started-app"
        DOCKER_TAG = "latest"  // Or use BUILD_NUMBER for unique tagging
        KUBE_CONFIG = credentials('kubeconfig-credential-id') // Kubernetes config from Jenkins credentials
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the source code...'
                git url: 'https://github.com/suraj-v86/getting-started-app', branch: 'main'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                sh 'npm test'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh """
                docker build -t ${new-app}:${v1} .
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to the registry...'
                withDockerRegistry([credentialsId: 'docker-credentials-id', url: 'https://index.docker.io/v1/']) {
                    sh """
                    docker push ${new-app}:${v1}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes...'
                withKubeConfig([credentialsId: 'kubeconfig-credential-id']) {
                    sh """
                    kubectl set image deployment/new-app-deployment \
                        new-app-container=${new-app}:${v1}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for more details.'
        }
    }
}
